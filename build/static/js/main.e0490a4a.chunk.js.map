{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["MainContainer","styled","div","SubContainer","Title","Result","App","option","useState","percent","density","mw","config","setConfig","type","value","onChange","e","target","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAIMA,EAAgBC,IAAOC,IAAV,6HAObC,EAAeF,IAAOC,IAAV,wfA8BZE,EAAQH,IAAOC,IAAV,kHAOLG,EAASJ,IAAOC,IAAV,yHAyEGI,EAzDH,WAAO,IAHFC,EAGC,EACYC,mBAAuB,CACjDC,QAAS,EACTC,QAAS,EACTC,GAAI,IAJU,mBACTC,EADS,KACDC,EADC,KAOhB,OACE,eAACb,EAAD,WACE,eAACI,EAAD,8CAAe,IAAf,4CACA,eAACD,EAAD,WACE,+BACE,oEAEE,uBACEW,KAAK,SACLC,MAAOH,EAAOH,QACdO,SAAU,SAACC,GAAD,OACRJ,EAAU,2BAAKD,GAAN,IAAcH,SAAUQ,EAAEC,OAAOH,YANhD,SAYF,+BACE,kDAEE,uBACED,KAAK,SACLC,MAAOH,EAAOF,QACdM,SAAU,SAACC,GAAD,OACRJ,EAAU,2BAAKD,GAAN,IAAcF,SAAUO,EAAEC,OAAOH,YANhD,gBAYF,+BACE,sGAEE,uBACED,KAAK,SACLC,MAAOH,EAAOD,GACdK,SAAU,SAACC,GAAD,OAAOJ,EAAU,2BAAKD,GAAN,IAAcD,IAAKM,EAAEC,OAAOH,oBAK9D,eAACV,EAAD,CAAQc,UAAU,SAAlB,0BAEE,wBArDSZ,EAsDAK,EArDG,GAAjBL,EAAOE,QAAeF,EAAOG,SAAY,EAAIH,EAAOI,YChDxCS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e0490a4a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport \"./App.css\";\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst SubContainer = styled.div`\n  width: 30rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n\n  input {\n    width: 5rem;\n    margin-bottom: 2rem;\n    margin-left: 1rem;\n    height: 2rem;\n    font-size: 2rem;\n  }\n\n  form:nth-of-type(1) input {\n    margin-right: 1rem;\n  }\n\n  form:nth-of-type(2) input {\n    margin-right: 1rem;\n  }\n\n  form:nth-of-type(3) input {\n    margin-right: 1rem;\n    margin-bottom: 5rem;\n  }\n`;\n\nconst Title = styled.div`\n  font-size: 3rem;\n  margin: 2rem 0 3rem;\n  color: #6741d9;\n  text-align: center;\n`;\n\nconst Result = styled.div`\n  /* margin-right: 7.5rem; */\n  color: #6741d9;\n  text-align: center;\n  font-size: 2rem;\n`;\n\ninterface ForMolOption {\n  percent: number;\n  density: number;\n  mw: number;\n}\n\nconst calcMol = (option: ForMolOption) =>\n  (option.percent * 10 * option.density) / (1 * option.mw);\n\nconst App = () => {\n  const [config, setConfig] = useState<ForMolOption>({\n    percent: 0,\n    density: 0,\n    mw: 0,\n  });\n\n  return (\n    <MainContainer>\n      <Title>퍼센트농도 -{\">\"} 몰농도 환산기</Title>\n      <SubContainer>\n        <form>\n          <label>\n            퍼센트농도:\n            <input\n              type=\"number\"\n              value={config.percent}\n              onChange={(e) =>\n                setConfig({ ...config, percent: +e.target.value })\n              }\n            />\n            %\n          </label>\n        </form>\n        <form>\n          <label>\n            밀도:\n            <input\n              type=\"number\"\n              value={config.density}\n              onChange={(e) =>\n                setConfig({ ...config, density: +e.target.value })\n              }\n            />\n            g/cm³\n          </label>\n        </form>\n        <form>\n          <label>\n            원자량, 분자량, 화학식량:\n            <input\n              type=\"number\"\n              value={config.mw}\n              onChange={(e) => setConfig({ ...config, mw: +e.target.value })}\n            />\n          </label>\n        </form>\n      </SubContainer>\n      <Result className=\"result\">\n        결과!\n        <br />\n        {calcMol(config)}\n      </Result>\n    </MainContainer>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}